mod META-COMPUTATION is
  pr TRACE + ADS-MAP .
  pr META-LEVEL .

  vars M : Module .
  vars RLS : RuleSet .
  vars RL : Rule .
  vars T T2 : Term .
  vars ATTS : AttrSet .
  vars AWST : AWState .
  vars STR STR2 : String .
  vars X X2 Y Y2 Z Z2 ERR : FloatOrInt .
  vars STRs : Set{String} .
  vars CEXP : ComparableExp .
  var I : Int .

  op error : -> [AWState] .

  op stateAtTime : FloatOrInt -> AWState .

  op minTTC : String -> FloatOrInt .
  op minTTC : String RuleSet FloatOrInt -> FloatOrInt .

  eq minTTC(STR) = minTTC(STR, getRls(upModule('TRACE, false)), infiniteF) .
  eq minTTC(STR, none, X) = X .
  ceq minTTC(STR, RL RLS, X) =
      if X2 < X
      then minTTC(STR, RLS, X2)
      else minTTC(STR, RLS, X)
      fi
    if rl T => T2 [ATTS] . := RL /\
       AWST := downTerm(T, error) /\
       AWST =/= error /\
       X2 := ttc(AWST, STR) .

  op egoSpeedAtCutin : -> FloatOrInt .
  op egoSpeedAtCutin : RuleSet -> FloatOrInt .
  eq egoSpeedAtCutin = egoSpeedAtCutin(getRls(upModule('TRACE, false))) .
  eq egoSpeedAtCutin((none).RuleSet) = -1.0 .
  ceq egoSpeedAtCutin(RL RLS) =
      if timeStamp(AWST) == cutinStartTime
      then gtSpeed(AWST, "ego")
      else egoSpeedAtCutin(RLS)
      fi
    if rl T => T2 [ATTS] . := RL /\
       AWST := downTerm(T, error) /\
       AWST =/= error .

  op stateAtTime : FloatOrInt RuleSet -> AWState .
  eq stateAtTime(X) = stateAtTime(X, getRls(upModule('TRACE, false))) .
  eq stateAtTime(X, (none).RuleSet) = 0.0 # {empty} .
  ceq stateAtTime(X, RL RLS) =
      if (ERR >= -0.0001) and (ERR <= 0.0001)
      then AWST
      else stateAtTime(X, RLS)
      fi
    if rl T => T2 [ATTS] . := RL /\
       AWST := downTerm(T, error) /\
       AWST =/= error /\
       ERR := (timeStamp(AWST) + -1.0 * X) .

  sort PerceptionPropSymbol .
  ops perp-pos-diff perp-rota-diff perp-shapelength-diff perp-shapewidth-diff IOU-ratio : -> PerceptionPropSymbol [ctor] .
  vars COP COP2 : ComparisonOp .
  vars PPS : PerceptionPropSymbol .

  op allNPCVehicles : -> Set{String} .
  ceq allNPCVehicles = allNPCVehicles(AWST)
    if rl T => T2 [ATTS] . RLS := getRls(upModule('TRACE, false)) /\
       AWST := downTerm(T, error) /\
       AWST =/= error .
  
  op collision : String -> Formula .
  op pos-diff : String -> ComparableExp .
  op ttc : -> ComparableExp .

  op collisionAux : String Set{String} -> Formula .
  eq collision(STR) = collisionAux(STR, allNPCVehicles) .
  eq collisionAux(STR, empty) = False .
  eq collisionAux(STR, (STR2 , STRs)) = 
    if STR == STR2
    then collisionAux(STR, STRs)
    else collision(STR, STR2) \/ collisionAux(STR, STRs)
    fi .

  op pos-diff-Aux : String Set{String} ComparisonOp FloatOrInt -> Formula .
  eq pos-diff(STR) COP X = pos-diff-Aux(STR, allNPCVehicles, COP, X) .
  eq pos-diff-Aux(STR, empty, COP, X) = True .
  eq pos-diff-Aux(STR, (STR2 , STRs), COP, X) = 
    if STR == STR2
    then pos-diff-Aux(STR, STRs, COP, X) 
    else (pos-diff(STR, STR2) COP X) /\ pos-diff-Aux(STR, STRs, COP, X) 
    fi .

  op ttcAux : Set{String} ComparisonOp FloatOrInt -> Formula .
  eq ttc COP X = ttcAux(allNPCVehicles, COP, X) .
  eq ttcAux(empty, COP, X) = True .
  eq ttcAux((STR2 , STRs), COP, X) = 
    if STR2 == "ego"
    then ttcAux(STRs, COP, X) 
    else (ttc(STR2) COP X) /\ ttcAux(STRs, COP, X)
    fi .

  op distance__->___within_ms : ComparisonOp FloatOrInt PerceptionPropSymbol ComparisonOp FloatOrInt FloatOrInt -> Formula .
  op perpIterAux : ComparisonOp FloatOrInt PerceptionPropSymbol ComparisonOp FloatOrInt FloatOrInt Set{String} -> Formula .

---  distance <   9 -> perp-pos-diff < 2 within 200 ms
  eq distance COP X -> PPS COP2 Y within Z ms =
      perpIterAux(COP,X,PPS,COP2,Y,Z,allNPCVehicles) .

  eq perpIterAux(COP,X,PPS,COP2,Y,Z, empty) = True .
  eq perpIterAux(COP,X,PPS,COP2,Y,Z, (STR, STRs)) =
    ((pos-diff("ego", STR) COP X)
     -> 
     (if PPS == perp-pos-diff
      then (perp-pos-diff(STR) COP2 Y) within Z ms
      else 
        if PPS == perp-rota-diff
        then (perp-rota-diff(STR) COP2 Y) within Z ms
        else 
          if PPS == perp-shapelength-diff
          then (perp-shapelength-diff(STR) COP2 Y) within Z ms
          else 
            if PPS == perp-shapewidth-diff
            then (perp-shapewidth-diff(STR) COP2 Y) within Z ms
            else (IOU-ratio(STR) COP2 Y) within Z ms
            fi
          fi
        fi
      fi)
    ) /\ 
    perpIterAux(COP,X,PPS,COP2,Y,Z, STRs) .
endm